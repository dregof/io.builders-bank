/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.builders.bank.infra.rest.api;

import io.builders.bank.infra.rest.api.model.DepositRequestDTO;
import io.builders.bank.infra.rest.api.model.ErrorDTO;
import io.builders.bank.infra.rest.api.model.TransferRequestDTO;
import io.builders.bank.infra.rest.api.model.WalletCreationRequestDTO;
import io.builders.bank.infra.rest.api.model.WalletInformationDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-11T14:49:52.070439600+01:00[Europe/Madrid]")
@Validated
@Tag(name = "Wallets", description = "Allowed walletÂ´s operations.")
public interface WalletsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/deposit : Make a deposit to an existing wallet.
     *
     * @param depositRequestDTO Information about the wallet that is going to be created. (required)
     * @return The deposit has been made successfully (status code 200)
     *         or Bad Request. (status code 400)
     *         or Internal Server Error. (status code 500)
     */
    @Operation(
        operationId = "createDeposit",
        summary = "Make a deposit to an existing wallet.",
        tags = { "Wallets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The deposit has been made successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/deposit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createDeposit(
        @Parameter(name = "DepositRequestDTO", description = "Information about the wallet that is going to be created.", required = true) @Valid @RequestBody DepositRequestDTO depositRequestDTO
    ) {
        return createDeposit(depositRequestDTO);
    }

    // Override this method
    default  ResponseEntity<Void> createDeposit(DepositRequestDTO depositRequestDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/transference : Make a transference between two existing wallets.
     *
     * @param transferRequestDTO Information about the transference requested to be made. (required)
     * @return The transference has been made successfully (status code 200)
     *         or Bad Request. (status code 400)
     *         or Not Found. (status code 404)
     *         or Not Found. (status code 500)
     */
    @Operation(
        operationId = "createTransference",
        summary = "Make a transference between two existing wallets.",
        tags = { "Wallets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The transference has been made successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/transference",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createTransference(
        @Parameter(name = "TransferRequestDTO", description = "Information about the transference requested to be made.", required = true) @Valid @RequestBody TransferRequestDTO transferRequestDTO
    ) {
        return createTransference(transferRequestDTO);
    }

    // Override this method
    default  ResponseEntity<Void> createTransference(TransferRequestDTO transferRequestDTO) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/wallet : Create a wallet
     *
     * @param walletCreationRequestDTO Wallet&#39;s information to be created. (required)
     * @return Information about a wallet. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Internal Server Error. (status code 500)
     */
    @Operation(
        operationId = "createWallet",
        summary = "Create a wallet",
        tags = { "Wallets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information about a wallet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WalletInformationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/wallet",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<WalletInformationDTO> _createWallet(
        @Parameter(name = "WalletCreationRequestDTO", description = "Wallet's information to be created.", required = true) @Valid @RequestBody WalletCreationRequestDTO walletCreationRequestDTO
    ) {
        return createWallet(walletCreationRequestDTO);
    }

    // Override this method
    default  ResponseEntity<WalletInformationDTO> createWallet(WalletCreationRequestDTO walletCreationRequestDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/wallet/{wallet_id} : Retrieve wallet balance and movements.
     *
     * @param walletId Unique identifier of a wallet (required)
     * @return Information about a wallet. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Not Found. (status code 404)
     */
    @Operation(
        operationId = "findWalletById",
        summary = "Retrieve wallet balance and movements.",
        tags = { "Wallets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information about a wallet.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WalletInformationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/wallet/{wallet_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<WalletInformationDTO> _findWalletById(
        @Parameter(name = "wallet_id", description = "Unique identifier of a wallet", required = true, in = ParameterIn.PATH) @PathVariable("wallet_id") Long walletId
    ) {
        return findWalletById(walletId);
    }

    // Override this method
    default  ResponseEntity<WalletInformationDTO> findWalletById(Long walletId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
